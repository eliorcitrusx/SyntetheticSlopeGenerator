from itertools import product
from typing import List
import numpy as np
from segment import Segment

"""
    This class create a partition of the space into rectangles, and creates the segments.
    Currently the rectangles are of equal size.
    ...
    
    Attributes
    ----------
    segments : List[Segment]
        The segments generated by the class.
    
    Methods
    -------
    segments(self):
    Returns the segments held in the class.
    
    generate_segments(d: int, b_low: List, b_high: List) -> List[Segment]
        The method partitions the space into rectangles and create a Segment object for each rectangle.
    
"""


class SegmentsGenerator:
    def __init__(self, dimensions: int, boundaries_low: List, boundaries_high: List, data_samples_min: int,
                 data_samples_max: int):
        self._segments = self.generate_segments(dimensions, boundaries_low, boundaries_high, data_samples_min,
                                                data_samples_max)

    @property
    def segments(self):
        return self._segments

    @staticmethod
    def generate_segments(dimensions: int, boundaries_low: List, boundaries_high: List, data_samples_min: int,
                          data_samples_max: int) -> List[Segment]:
        x_boundaries_low = [np.arange(boundaries_low[i], boundaries_high[i] - 1, 1) for i in range(dimensions)]
        x_boundaries_high = [np.arange(boundaries_low[i] + 1, boundaries_high[i], 1) for i in range(dimensions)]
        low_edges = [low_edge for low_edge in product(*x_boundaries_low)]
        high_edges = [high_edge for high_edge in product(*x_boundaries_high)]
        return [Segment(dimensions, low_edges[i], high_edges[i], data_samples_min, data_samples_max) for i in
                range(len(low_edges))]
